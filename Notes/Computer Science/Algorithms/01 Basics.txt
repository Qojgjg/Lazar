n!      15
2^n     40
n^3     10000
n^2     1000000
n log n 100000000
n       1000000000000
log n^  >1000000000000

Strategies

OEIS.
OEIS queries like "1, 2, 4, 7, 13 minimal".
Google "OEIS 123456" perhaps with "C++".
Google critical numbers at all precisions.
WolframAlpha.
Naive implementations to produce OEIS queries or insights into structure.
Use -1 rather than INT_MAX.

Note that the target is to get from the precise input to the precise output. There are a number of settings where reordering queries can be helpful i.e. not naively simulating. Furthermore, if the target is to compute a number, one can consider producing some other numbers and error correcting in a certain way as long as it produces the target output.

Take things to the logical extremes, mathematical degeneracies, pathological inputs, edge cases, low n base cases, etc.

If one is suboptimally looking left and right between windows, transcribing logical literals, create another data structure and manually enter all data vectorised in one place. This also makes debugging significantly easier if one errs.

Come back to tasks on a daily basis, perhaps just for 10 minutes to re contemplate and record thoughts and links in that corresponding text file.

Read the Project Leonhard Euler forum. Never cheat or submit a string after it appears in the public timestamped written record, for that appears and may be flagged as suspicious, it may lead to being permanently delisted, and furthermore there exists little purpose to appearing on a public timestamped leaderboard after that point in time. Use an "unlisted" alternate account "Lazar0".

Think about codes, write helpful informative comments, come back and re write better codes, terse, legible, functional, maintainable. When dealing with equations, write them out in natural mathematics. This will make it easier to spot the structures and effectively deal with things, perhaps in comments, prior to composing less human legible codes.

Usually all task statement details, including titles, are relevant and might plausibly help one rule out or in various strategies for the task but naive and close examination of low n cases is often revealing. If one composes an algorithm for a more general setting, consider if the numerics or task specifics give additional structure with which to produce a better algorithm. Can auxiliary memory help? If a naive O[1] auxiliary memory algorithm is too slow?

Do not expect that WolframAlpha will produce a closed form expression for a real number given 8 digits of precision. Think quite precisely about rates of convergence and error terms functions. Obtain and learn how to write codes in the Mathematica software As Soon As Possible.

One can come back to tasks post facto, and think about code, re factor code, think more about the maths, algorithms, ideas, literature.

For a structure like a high pressure, timer running, Google Code Jam round view all tasks, compose solutions, algorithms, comments, keywords, ideas, prior to composing code.