	Loopy

I wanted to compose a task where contestants had to choose a good conditional prior to executing some other code so that only efficient implementations would be accepted, and others would be given the time limit exceeded verdict. But I do not know if this is possible without also forcing accepted programs to be heavily optimised, -O3 tuning, etc. Another idea would be to present a task where for inputs under some threshold value, one algorithm is faster, and for inputs over that threshold value another algorithm is faster. It would humour me to compose an ICPC task which returns a ton of time limit exceeded verdicts and trolls the competitors participants.

	Determine The Determinants

Given a matrix A and a vector B your task is to compute the determinants of the matrices which result from replacing each column of A with B.

	Apples And Buckets

There are n buckets of indistinguishable apples. Your task is to count the number of ways you can select some number of apples in a range.

Input

The first input line has the integer n,a,b: the number of buckets, the minimum allowed, and maximum allowed number of apples.

The next line contains n integers c1,c2,...,cn: the number of apples in each bucket.

Output

Print one integer: modulo 1000000007, the number of ways to select between a and b apples inclusive e.g. the number of n-tuples of nonnegative integers (d1,d2,...,dn) such that 0<=di<=ci and a<=sum di<=b.

Constraints

0<=n<=100000
0<=a,b<=100000
1<=ci<=100000
1<=sum ci<=500000

Example

Input:
4 3 5
2 3 4 5

Output:
90